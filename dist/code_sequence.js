// Generated by CoffeeScript 1.9.3
(function() {
  var CodeSequence, aNumber, i, internalSequences, keymap, n;

  keymap = {
    "up": 38,
    "down": 40,
    "left": 37,
    "right": 39,
    "enter": 13,
    "space": 32,
    "shift": 16,
    "ctrl": 17,
    "alt": 18,
    "option": 18,
    "caps": 20,
    "escape": 27,
    "backspace": 8,
    "tab": 9,
    "meta": 91,
    "super": 91,
    "command": 91,
    "win": 91,
    "multiply": 107,
    "add": 107,
    "subtract": 107,
    "divide": 107,
    "decimal": 107,
    "dot": 107,
    "decimalPoint": 107,
    "equals": 100,
    "dash": 100
  };

  i = 47;

  n = 0;

  while (i++ < 57) {
    keymap[n] = i;
    keymap["num" + n] = i + 48;
    n++;
  }

  i = 65;

  while (i++ < 90) {
    keymap[String.fromCharCode(i).toLowerCase()] = i;
  }

  i = 112;

  while (i++ < 123) {
    keymap["f" + i] = i;
  }

  internalSequences = {
    'konami': 'up+up+down+down+left+right+left+right+a+b',
    'world': 'up+right+down+left'
  };

  CodeSequence = (function() {
    function CodeSequence(sequence, callback) {
      this.sequence = sequence;
      this.callback = callback;
      this.keydownSequence = '';
      this.triggered = false;
      this.constructSequence();
      this.addEvent(document, 'keyup', this.keyHandler);
    }

    CodeSequence.prototype.addEvent = function(elem, evt, fn) {
      if (elem.addEventListener) {
        return elem.addEventListener(evt, fn.bind(this), false);
      } else {
        return elem.attachEvent('on' + evt, fn.bind(this));
      }
    };

    CodeSequence.prototype.keyHandler = function(e) {
      this.keydownSequence += e.keyCode;
      if (this.keydownSequence.length > this.sequence.length) {
        this.keydownSequence = this.keydownSequence.substring(this.keydownSequence.length - this.sequence.length);
      }
      if (this.keydownSequence === this.sequence) {
        this.keydownSequence = [];
        this.callback();
        return this.triggered = true;
      }
    };

    CodeSequence.prototype.constructSequence = function() {
      var internalSequence;
      if ((internalSequence = internalSequences[this.sequence])) {
        this.sequence = internalSequence;
      }
      return this.sequence = this.sequence.split('+').map(function(key) {
        key = key.toLowerCase();
        if (key === aNumber(key)) {
          return key;
        } else {
          return keymap[key];
        }
      }).join('');
    };

    return CodeSequence;

  })();

  aNumber = function(val) {
    return typeof arg === 'number';
  };

  this.CodeSequence = CodeSequence;

}).call(this);
